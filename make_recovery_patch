#!/usr/bin/env python
#
# Copyright (C) 2014 The Android Open Source Project
# Copyright (C) 2016 The CyanogenMod Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import os
import tempfile
import copy
import re
import subprocess
import threading
import inspect

sys.path.insert(0, './build/tools/releasetools')
import common

if sys.hexversion < 0x02070000:
  print >> sys.stderr, "Python 2.7 or newer is required."
  sys.exit(1)

OPTIONS = common.OPTIONS

OSIP_CRC_OFFSET = 7
OSIP_ATTRIBUTE_OFFSET = 52

def Run(args, **kwargs):
  """Create and return a subprocess.Popen object, printing the command
  line on the terminal if -v was specified."""
  if OPTIONS.verbose:
    print "  running: ", " ".join(args)
  return subprocess.Popen(args, **kwargs)

def FixOsipHeader(osfile, ostype):
  data = bytearray(osfile.data)
  print "FixOsipHeader : Previous ostype  ", data[OSIP_ATTRIBUTE_OFFSET]

  sign_attr = data[OSIP_ATTRIBUTE_OFFSET] & 0x01
  print "FixOsipHeader : sign_attr ",sign_attr

  # set attribute to ostype parameter
  if ostype == "boot":
    data[OSIP_ATTRIBUTE_OFFSET]=0x0 + sign_attr
  if ostype == "recovery":
    data[OSIP_ATTRIBUTE_OFFSET]=0xc + sign_attr

  print "FixOsipHeader : New ostype  ", data[OSIP_ATTRIBUTE_OFFSET]

  # set crc to zero
  data[OSIP_CRC_OFFSET]=0
  # compute new crc
  crc = data[0] ^ data[1]
  for i in range(2,224):
    crc = crc ^ data[i]

  data[OSIP_CRC_OFFSET] = crc

  return data

class Difference(object):
  def __init__(self, tf, sf, diff_program=None):
    self.tf = tf
    self.sf = sf
    self.patch = None
    self.diff_program = diff_program

  def ComputePatch(self):
    """Compute the patch (as a string of data) needed to turn sf into
    tf.  Returns the same tuple as GetPatch()."""

    tf = self.tf
    sf = self.sf

    if self.diff_program:
      diff_program = self.diff_program
    else:
      ext = os.path.splitext(tf.name)[1]
      diff_program = DIFF_PROGRAM_BY_EXT.get(ext, "bsdiff")

    ttemp = tf.WriteToTemp()
    stemp = sf.WriteToTemp()

    ext = os.path.splitext(tf.name)[1]

    try:
      ptemp = tempfile.NamedTemporaryFile()
      if isinstance(diff_program, list):
        cmd = copy.copy(diff_program)
      else:
        cmd = [diff_program]
      cmd.append(stemp.name)
      cmd.append(ttemp.name)
      cmd.append(ptemp.name)
      print "\n\nDEBUG\n\ncmd_line : ",cmd
      p = Run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
      err = []
      def run():
        _, e = p.communicate()
        if e: err.append(e)
      th = threading.Thread(target=run)
      th.start()
      th.join(timeout=300)   # 5 mins
      if th.is_alive():
        print "WARNING: diff command timed out"
        p.terminate()
        th.join(5)
        if th.is_alive():
          p.kill()
          th.join()

      if err or p.returncode != 0:
        print "WARNING: failure running %s:\n%s\n" % (
            diff_program, "".join(err))
        self.patch = None
        return None, None, None
      diff = ptemp.read()
    finally:
      ptemp.close()
      stemp.close()
      ttemp.close()

    self.patch = diff
    return self.tf, self.sf, self.patch


def MakeRecoveryPatch(input_dir, output_sink, recovery_img, boot_img,
                      info_dict=None):
  """Generate a binary patch that creates the recovery image starting
  with the boot image.  (Most of the space in these images is just the
  kernel, which is identical for the two, so the resulting patch
  should be efficient.)  Add it to the output zip, along with a shell
  script that is run from init.rc on first boot to actually do the
  patching and install the new recovery image.

  recovery_img and boot_img should be File objects for the
  corresponding images.  info should be the dictionary returned by
  common.LoadInfoDict() on the input target_files.
  """

  if info_dict is None:
    info_dict = OPTIONS.info_dict

  diff_program = ["imgdiff"]

  d = Difference(recovery_img, boot_img, diff_program=diff_program)
  _, _, patch = d.ComputePatch()
  output_sink("recovery-from-boot.p", patch)

  sig_size = 480
  HEADER_START = 512
  HEADER_END = HEADER_START + sig_size

  sh = """#!/system/bin/sh
update_recovery \\
"""
  sh += """     --src-sha1 %(src_sha1)s \\
        --tgt-sha1 %(tgt_sha1)s \\
        --tgt-size %(tgt_size)d \\
        --patch /system/recovery-from-boot.p
""" % { 'src_sha1'   : boot_img.sha1,
        'tgt_sha1'   : recovery_img.sha1,
        'tgt_size'   : recovery_img.size }

  # The install script location moved from /system/etc to /system/bin
  # in the L release.  Parse the init.rc file to find out where the
  # target-files expects it to be, and put it there.
  sh_location = "bin/install-recovery.sh"
  try:
    with open(os.path.join(input_dir, "BOOT", "RAMDISK", "init.rc")) as f:
      for line in f:
        m = re.match("^service flash_recovery /system/(\S+)\s*$", line)
        if m:
          sh_location = m.group(1)
          print "putting script in", sh_location
          break
  except (OSError, IOError), e:
    print "failed to read init.rc: %s" % (e,)

  output_sink(sh_location, sh)

def main(argv):
  # def option_handler(o, a):
  #   return False

  args = common.ParseOptions(argv, __doc__)
  input_dir, output_dir = args

  OPTIONS.info_dict = common.LoadInfoDict(input_dir)

  recovery_img_tmp = common.GetBootableImage("recovery.img", "recovery.img",
                                         input_dir, "RECOVERY")
  boot_img_tmp = common.GetBootableImage("boot.img", "boot.img",
                                     input_dir, "BOOT")

  # When stitched, the attribute (OS type) could not be determined
  # Let's patch it before any processing

  boot_img=common.File(boot_img_tmp.name,FixOsipHeader(boot_img_tmp,"boot"))
  recovery_img=common.File(recovery_img_tmp.name,FixOsipHeader(recovery_img_tmp,"recovery"))

  if not recovery_img or not boot_img:
    sys.exit(0)

  def output_sink(fn, data):
    with open(os.path.join(output_dir, "SYSTEM", *fn.split("/")), "wb") as f:
      f.write(data)

  MakeRecoveryPatch(input_dir, output_sink, recovery_img, boot_img)

if __name__ == '__main__':
  main(sys.argv[1:])
